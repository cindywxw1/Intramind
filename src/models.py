from typing import Optional, Any
from pytidb.schema import TableModel, Field
from pytidb.embeddings import EmbeddingFunction


from datetime import datetime
from sqlalchemy import Text, Column, DateTime, text

# models we use
text_embed = EmbeddingFunction("openai/text-embedding-3-small")
llm_model = "gpt-4o-mini"

class Chunk(TableModel, table=True):
    __tablename__ = "chunks"
    __table_args__ = {"extend_existing": True}

    id: int = Field(primary_key=True)
    text: str = Field(sa_type=Text)
    document_id: int | None = Field(
        foreign_key="documents.id",
        ondelete="CASCADE",
        index=True
    )
    text_vec: Optional[Any] = text_embed.VectorField(
        source_field="text",
    )

class Document(TableModel, table=True):
    __tablename__ = "documents"
    __table_args__ = {"extend_existing": True}
    id: int = Field(primary_key=True)
    user_id: int| None = Field(nullable=True)
    document_name: str = Field(sa_type=Text)

# table chat_history that stores the references to chat sessions of all users. Each row stores info of a session that chat_message represents
class ChatHistory(TableModel, table=True):
    __tablename__ = "chat_history"

    id: int = Field(primary_key=True)
    user_id: int = Field(
        foreign_key="users.id",
        ondelete="CASCADE",
        index=True
    )
    updated_at: datetime = Field(
        sa_column=Column(
            DateTime,
            nullable=False,
            server_default=text("CURRENT_TIMESTAMP"),
            server_onupdate=text("CURRENT_TIMESTAMP")
        )
    )

# table chat_message is the sub-table of chat_history related by foreign key. Each row stores the message text, either a question asked by the user or the answer generated by the AI assistant
class ChatMessage(TableModel, table=True):
    __tablename__ = "chat_message"

    id: int = Field(primary_key=True)
    chat_history_id: int = Field(
        foreign_key="chat_history.id",
        ondelete="CASCADE",
        index=True
    )
    speaker_id: int
    text: str = Field(sa_type=Text)

# table user_chart stores info of users
class Users(TableModel, table=True):
    __tablename__ = "users"

    id: int = Field(primary_key=True)
    email: str = Field(unique=True, index=True)
    username: str | None = Field(default=None, max_length=225)